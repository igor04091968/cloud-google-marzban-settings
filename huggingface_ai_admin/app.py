import gradio as gr
from huggingface_hub import InferenceClient
import os

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
SYSTEM_PROMPT = """
You are a world-class expert in Linux system administration.
Your task is to convert a user's request in natural language into a SINGLE, executable shell command.
- Do NOT provide any explanation.
- Do NOT use markdown or any other formatting.
- Do NOT suggest multiple options.
- Just return the raw command, ready to be executed.

Example:
User: list all running docker containers
You: docker ps
"""

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å Meta Llama 3 70B - –æ–¥–Ω–∞ –∏–∑ –ª—É—á—à–∏—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
MODEL = "meta-llama/Meta-Llama-3-70B-Instruct"

def generate_command(user_request, hf_token):
    """
    –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ Hugging Face Inference API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã.
    """
    if not user_request:
        return "–û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
    if not hf_token:
        return "–û—à–∏–±–∫–∞: Hugging Face Token –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Hugging Face."

    try:
        client = InferenceClient(model=MODEL, token=hf_token)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_request},
        ]

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = client.chat_completion(
            messages=messages,
            max_tokens=200,
            temperature=0.1, # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö –∏ —Ç–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        )
        
        command = response.choices[0].message.content.strip()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        if command.startswith("`") and command.endswith("`"):
            command = command[1:-1]
        if command.startswith("bash\n"):
            command = command.replace("bash\n", "", 1)

        return command

    except Exception as e:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API: {str(e)}"

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio
with gr.Blocks() as demo:
    gr.Markdown(
        """
        # ü§ñ AI System Administrator Assistant
        –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ, –∏ –ò–ò –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ –≥–æ—Ç–æ–≤—É—é –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é shell-–∫–æ–º–∞–Ω–¥—É.
        **–í–Ω–∏–º–∞–Ω–∏–µ:** –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.
        """
    )
    
    hf_token_input = gr.Textbox(
        label="Hugging Face User Access Token",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω HF (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å hf_...)",
        type="password",
        info="–ù—É–∂–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ Settings -> Access Tokens –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
    )
    
    user_input = gr.Textbox(label="–í–∞—à –∑–∞–ø—Ä–æ—Å", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ–∫–∞–∂–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É'")
    
    generate_button = gr.Button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
    
    output_command = gr.Textbox(label="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", interactive=False, lines=3)

    generate_button.click(
        fn=generate_command,
        inputs=[user_input, hf_token_input],
        outputs=output_command
    )
    
    gr.Markdown(
        """
        ---
        *–ú–æ–¥–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: `meta-llama/Meta-Llama-3-70B-Instruct`.*
        """
    )

if __name__ == "__main__":
    demo.launch()
